# coding: utf-8

"""
    MetaboScape REST Application

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2025b
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnnotatedMsMsFragmentDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fragment_ion_formula': 'str',
        'accurate_mz': 'float',
        'ms_ms_spectrum_id': 'str',
        'ms_ms_rule_type': 'str',
        'lipid_identity_level': 'str',
        'chain_information': 'str'
    }

    attribute_map = {
        'fragment_ion_formula': 'fragmentIonFormula',
        'accurate_mz': 'accurateMz',
        'ms_ms_spectrum_id': 'msMsSpectrumId',
        'ms_ms_rule_type': 'msMsRuleType',
        'lipid_identity_level': 'lipidIdentityLevel',
        'chain_information': 'chainInformation'
    }

    def __init__(self, fragment_ion_formula=None, accurate_mz=None, ms_ms_spectrum_id=None, ms_ms_rule_type=None, lipid_identity_level=None, chain_information=None):  # noqa: E501
        """AnnotatedMsMsFragmentDetails - a model defined in Swagger"""  # noqa: E501
        self._fragment_ion_formula = None
        self._accurate_mz = None
        self._ms_ms_spectrum_id = None
        self._ms_ms_rule_type = None
        self._lipid_identity_level = None
        self._chain_information = None
        self.discriminator = None
        if fragment_ion_formula is not None:
            self.fragment_ion_formula = fragment_ion_formula
        if accurate_mz is not None:
            self.accurate_mz = accurate_mz
        if ms_ms_spectrum_id is not None:
            self.ms_ms_spectrum_id = ms_ms_spectrum_id
        if ms_ms_rule_type is not None:
            self.ms_ms_rule_type = ms_ms_rule_type
        if lipid_identity_level is not None:
            self.lipid_identity_level = lipid_identity_level
        if chain_information is not None:
            self.chain_information = chain_information

    @property
    def fragment_ion_formula(self):
        """Gets the fragment_ion_formula of this AnnotatedMsMsFragmentDetails.  # noqa: E501


        :return: The fragment_ion_formula of this AnnotatedMsMsFragmentDetails.  # noqa: E501
        :rtype: str
        """
        return self._fragment_ion_formula

    @fragment_ion_formula.setter
    def fragment_ion_formula(self, fragment_ion_formula):
        """Sets the fragment_ion_formula of this AnnotatedMsMsFragmentDetails.


        :param fragment_ion_formula: The fragment_ion_formula of this AnnotatedMsMsFragmentDetails.  # noqa: E501
        :type: str
        """

        self._fragment_ion_formula = fragment_ion_formula

    @property
    def accurate_mz(self):
        """Gets the accurate_mz of this AnnotatedMsMsFragmentDetails.  # noqa: E501


        :return: The accurate_mz of this AnnotatedMsMsFragmentDetails.  # noqa: E501
        :rtype: float
        """
        return self._accurate_mz

    @accurate_mz.setter
    def accurate_mz(self, accurate_mz):
        """Sets the accurate_mz of this AnnotatedMsMsFragmentDetails.


        :param accurate_mz: The accurate_mz of this AnnotatedMsMsFragmentDetails.  # noqa: E501
        :type: float
        """

        self._accurate_mz = accurate_mz

    @property
    def ms_ms_spectrum_id(self):
        """Gets the ms_ms_spectrum_id of this AnnotatedMsMsFragmentDetails.  # noqa: E501


        :return: The ms_ms_spectrum_id of this AnnotatedMsMsFragmentDetails.  # noqa: E501
        :rtype: str
        """
        return self._ms_ms_spectrum_id

    @ms_ms_spectrum_id.setter
    def ms_ms_spectrum_id(self, ms_ms_spectrum_id):
        """Sets the ms_ms_spectrum_id of this AnnotatedMsMsFragmentDetails.


        :param ms_ms_spectrum_id: The ms_ms_spectrum_id of this AnnotatedMsMsFragmentDetails.  # noqa: E501
        :type: str
        """

        self._ms_ms_spectrum_id = ms_ms_spectrum_id

    @property
    def ms_ms_rule_type(self):
        """Gets the ms_ms_rule_type of this AnnotatedMsMsFragmentDetails.  # noqa: E501


        :return: The ms_ms_rule_type of this AnnotatedMsMsFragmentDetails.  # noqa: E501
        :rtype: str
        """
        return self._ms_ms_rule_type

    @ms_ms_rule_type.setter
    def ms_ms_rule_type(self, ms_ms_rule_type):
        """Sets the ms_ms_rule_type of this AnnotatedMsMsFragmentDetails.


        :param ms_ms_rule_type: The ms_ms_rule_type of this AnnotatedMsMsFragmentDetails.  # noqa: E501
        :type: str
        """

        self._ms_ms_rule_type = ms_ms_rule_type

    @property
    def lipid_identity_level(self):
        """Gets the lipid_identity_level of this AnnotatedMsMsFragmentDetails.  # noqa: E501


        :return: The lipid_identity_level of this AnnotatedMsMsFragmentDetails.  # noqa: E501
        :rtype: str
        """
        return self._lipid_identity_level

    @lipid_identity_level.setter
    def lipid_identity_level(self, lipid_identity_level):
        """Sets the lipid_identity_level of this AnnotatedMsMsFragmentDetails.


        :param lipid_identity_level: The lipid_identity_level of this AnnotatedMsMsFragmentDetails.  # noqa: E501
        :type: str
        """

        self._lipid_identity_level = lipid_identity_level

    @property
    def chain_information(self):
        """Gets the chain_information of this AnnotatedMsMsFragmentDetails.  # noqa: E501


        :return: The chain_information of this AnnotatedMsMsFragmentDetails.  # noqa: E501
        :rtype: str
        """
        return self._chain_information

    @chain_information.setter
    def chain_information(self, chain_information):
        """Sets the chain_information of this AnnotatedMsMsFragmentDetails.


        :param chain_information: The chain_information of this AnnotatedMsMsFragmentDetails.  # noqa: E501
        :type: str
        """

        self._chain_information = chain_information

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnnotatedMsMsFragmentDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnnotatedMsMsFragmentDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
