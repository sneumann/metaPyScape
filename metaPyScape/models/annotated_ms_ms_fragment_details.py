# coding: utf-8

"""
    MetaboScape REST Application

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2025b
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class AnnotatedMsMsFragmentDetails(BaseModel):
    """
    AnnotatedMsMsFragmentDetails
    """ # noqa: E501
    fragment_ion_formula: Optional[StrictStr] = Field(default=None, alias="fragmentIonFormula")
    accurate_mz: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="accurateMz")
    ms_ms_spectrum_id: Optional[StrictStr] = Field(default=None, alias="msMsSpectrumId")
    ms_ms_rule_type: Optional[StrictStr] = Field(default=None, alias="msMsRuleType")
    lipid_identity_level: Optional[StrictStr] = Field(default=None, alias="lipidIdentityLevel")
    chain_information: Optional[StrictStr] = Field(default=None, alias="chainInformation")
    __properties: ClassVar[List[str]] = ["fragmentIonFormula", "accurateMz", "msMsSpectrumId", "msMsRuleType", "lipidIdentityLevel", "chainInformation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AnnotatedMsMsFragmentDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if ms_ms_rule_type (nullable) is None
        # and model_fields_set contains the field
        if self.ms_ms_rule_type is None and "ms_ms_rule_type" in self.model_fields_set:
            _dict['msMsRuleType'] = None

        # set to None if lipid_identity_level (nullable) is None
        # and model_fields_set contains the field
        if self.lipid_identity_level is None and "lipid_identity_level" in self.model_fields_set:
            _dict['lipidIdentityLevel'] = None

        # set to None if chain_information (nullable) is None
        # and model_fields_set contains the field
        if self.chain_information is None and "chain_information" in self.model_fields_set:
            _dict['chainInformation'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AnnotatedMsMsFragmentDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fragmentIonFormula": obj.get("fragmentIonFormula"),
            "accurateMz": obj.get("accurateMz"),
            "msMsSpectrumId": obj.get("msMsSpectrumId"),
            "msMsRuleType": obj.get("msMsRuleType"),
            "lipidIdentityLevel": obj.get("lipidIdentityLevel"),
            "chainInformation": obj.get("chainInformation")
        })
        return _obj


