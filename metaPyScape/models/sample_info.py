# coding: utf-8

"""
    MetaboScape REST Application

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2025b
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SampleInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sample_id': 'str',
        'name': 'str',
        'sample_type': 'str',
        'creation_date': 'int',
        'attributes': 'list[SampleAttribute]'
    }

    attribute_map = {
        'sample_id': 'sampleId',
        'name': 'name',
        'sample_type': 'sampleType',
        'creation_date': 'creationDate',
        'attributes': 'attributes'
    }

    def __init__(self, sample_id=None, name=None, sample_type=None, creation_date=None, attributes=None):  # noqa: E501
        """SampleInfo - a model defined in Swagger"""  # noqa: E501
        self._sample_id = None
        self._name = None
        self._sample_type = None
        self._creation_date = None
        self._attributes = None
        self.discriminator = None
        if sample_id is not None:
            self.sample_id = sample_id
        if name is not None:
            self.name = name
        if sample_type is not None:
            self.sample_type = sample_type
        if creation_date is not None:
            self.creation_date = creation_date
        if attributes is not None:
            self.attributes = attributes

    @property
    def sample_id(self):
        """Gets the sample_id of this SampleInfo.  # noqa: E501


        :return: The sample_id of this SampleInfo.  # noqa: E501
        :rtype: str
        """
        return self._sample_id

    @sample_id.setter
    def sample_id(self, sample_id):
        """Sets the sample_id of this SampleInfo.


        :param sample_id: The sample_id of this SampleInfo.  # noqa: E501
        :type: str
        """

        self._sample_id = sample_id

    @property
    def name(self):
        """Gets the name of this SampleInfo.  # noqa: E501


        :return: The name of this SampleInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SampleInfo.


        :param name: The name of this SampleInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def sample_type(self):
        """Gets the sample_type of this SampleInfo.  # noqa: E501


        :return: The sample_type of this SampleInfo.  # noqa: E501
        :rtype: str
        """
        return self._sample_type

    @sample_type.setter
    def sample_type(self, sample_type):
        """Sets the sample_type of this SampleInfo.


        :param sample_type: The sample_type of this SampleInfo.  # noqa: E501
        :type: str
        """

        self._sample_type = sample_type

    @property
    def creation_date(self):
        """Gets the creation_date of this SampleInfo.  # noqa: E501


        :return: The creation_date of this SampleInfo.  # noqa: E501
        :rtype: int
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this SampleInfo.


        :param creation_date: The creation_date of this SampleInfo.  # noqa: E501
        :type: int
        """

        self._creation_date = creation_date

    @property
    def attributes(self):
        """Gets the attributes of this SampleInfo.  # noqa: E501


        :return: The attributes of this SampleInfo.  # noqa: E501
        :rtype: list[SampleAttribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this SampleInfo.


        :param attributes: The attributes of this SampleInfo.  # noqa: E501
        :type: list[SampleAttribute]
        """

        self._attributes = attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SampleInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SampleInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
