# coding: utf-8

"""
    MetaboScape REST Application

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2025b
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MsSpectrum(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'signals': 'list[Signal]',
        'analysis_id': 'str',
        'mean_measured_mz': 'float',
        'rt_in_seconds': 'float',
        'ccs': 'float'
    }

    attribute_map = {
        'signals': 'signals',
        'analysis_id': 'analysisId',
        'mean_measured_mz': 'meanMeasuredMz',
        'rt_in_seconds': 'rtInSeconds',
        'ccs': 'ccs'
    }

    def __init__(self, signals=None, analysis_id=None, mean_measured_mz=None, rt_in_seconds=None, ccs=None):  # noqa: E501
        """MsSpectrum - a model defined in Swagger"""  # noqa: E501
        self._signals = None
        self._analysis_id = None
        self._mean_measured_mz = None
        self._rt_in_seconds = None
        self._ccs = None
        self.discriminator = None
        if signals is not None:
            self.signals = signals
        if analysis_id is not None:
            self.analysis_id = analysis_id
        if mean_measured_mz is not None:
            self.mean_measured_mz = mean_measured_mz
        if rt_in_seconds is not None:
            self.rt_in_seconds = rt_in_seconds
        if ccs is not None:
            self.ccs = ccs

    @property
    def signals(self):
        """Gets the signals of this MsSpectrum.  # noqa: E501


        :return: The signals of this MsSpectrum.  # noqa: E501
        :rtype: list[Signal]
        """
        return self._signals

    @signals.setter
    def signals(self, signals):
        """Sets the signals of this MsSpectrum.


        :param signals: The signals of this MsSpectrum.  # noqa: E501
        :type: list[Signal]
        """

        self._signals = signals

    @property
    def analysis_id(self):
        """Gets the analysis_id of this MsSpectrum.  # noqa: E501


        :return: The analysis_id of this MsSpectrum.  # noqa: E501
        :rtype: str
        """
        return self._analysis_id

    @analysis_id.setter
    def analysis_id(self, analysis_id):
        """Sets the analysis_id of this MsSpectrum.


        :param analysis_id: The analysis_id of this MsSpectrum.  # noqa: E501
        :type: str
        """

        self._analysis_id = analysis_id

    @property
    def mean_measured_mz(self):
        """Gets the mean_measured_mz of this MsSpectrum.  # noqa: E501


        :return: The mean_measured_mz of this MsSpectrum.  # noqa: E501
        :rtype: float
        """
        return self._mean_measured_mz

    @mean_measured_mz.setter
    def mean_measured_mz(self, mean_measured_mz):
        """Sets the mean_measured_mz of this MsSpectrum.


        :param mean_measured_mz: The mean_measured_mz of this MsSpectrum.  # noqa: E501
        :type: float
        """

        self._mean_measured_mz = mean_measured_mz

    @property
    def rt_in_seconds(self):
        """Gets the rt_in_seconds of this MsSpectrum.  # noqa: E501


        :return: The rt_in_seconds of this MsSpectrum.  # noqa: E501
        :rtype: float
        """
        return self._rt_in_seconds

    @rt_in_seconds.setter
    def rt_in_seconds(self, rt_in_seconds):
        """Sets the rt_in_seconds of this MsSpectrum.


        :param rt_in_seconds: The rt_in_seconds of this MsSpectrum.  # noqa: E501
        :type: float
        """

        self._rt_in_seconds = rt_in_seconds

    @property
    def ccs(self):
        """Gets the ccs of this MsSpectrum.  # noqa: E501


        :return: The ccs of this MsSpectrum.  # noqa: E501
        :rtype: float
        """
        return self._ccs

    @ccs.setter
    def ccs(self, ccs):
        """Sets the ccs of this MsSpectrum.


        :param ccs: The ccs of this MsSpectrum.  # noqa: E501
        :type: float
        """

        self._ccs = ccs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MsSpectrum, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MsSpectrum):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
