# coding: utf-8

"""
    MetaboScape REST Application

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2025b
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class AQScores(BaseModel):
    """
    AQScores
    """ # noqa: E501
    mz_aq_score: Optional[StrictInt] = Field(default=None, alias="mzAQScore")
    rt_aq_score: Optional[StrictInt] = Field(default=None, alias="rtAQScore")
    isotope_pattern_aq_score: Optional[StrictInt] = Field(default=None, alias="isotopePatternAQScore")
    msms_aq_score: Optional[StrictInt] = Field(default=None, alias="msmsAQScore")
    ccs_aq_score: Optional[StrictInt] = Field(default=None, alias="ccsAQScore")
    mz_deviation: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="mzDeviation")
    rt_deviation: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="rtDeviation")
    isotope_pattern_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="isotopePatternScore")
    msms_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="msmsScore")
    ccs_deviation: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ccsDeviation")
    annotation_modifiers: Optional[List[Optional[StrictStr]]] = Field(default=None, alias="annotationModifiers")
    __properties: ClassVar[List[str]] = ["mzAQScore", "rtAQScore", "isotopePatternAQScore", "msmsAQScore", "ccsAQScore", "mzDeviation", "rtDeviation", "isotopePatternScore", "msmsScore", "ccsDeviation", "annotationModifiers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AQScores from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if mz_aq_score (nullable) is None
        # and model_fields_set contains the field
        if self.mz_aq_score is None and "mz_aq_score" in self.model_fields_set:
            _dict['mzAQScore'] = None

        # set to None if rt_aq_score (nullable) is None
        # and model_fields_set contains the field
        if self.rt_aq_score is None and "rt_aq_score" in self.model_fields_set:
            _dict['rtAQScore'] = None

        # set to None if isotope_pattern_aq_score (nullable) is None
        # and model_fields_set contains the field
        if self.isotope_pattern_aq_score is None and "isotope_pattern_aq_score" in self.model_fields_set:
            _dict['isotopePatternAQScore'] = None

        # set to None if msms_aq_score (nullable) is None
        # and model_fields_set contains the field
        if self.msms_aq_score is None and "msms_aq_score" in self.model_fields_set:
            _dict['msmsAQScore'] = None

        # set to None if ccs_aq_score (nullable) is None
        # and model_fields_set contains the field
        if self.ccs_aq_score is None and "ccs_aq_score" in self.model_fields_set:
            _dict['ccsAQScore'] = None

        # set to None if mz_deviation (nullable) is None
        # and model_fields_set contains the field
        if self.mz_deviation is None and "mz_deviation" in self.model_fields_set:
            _dict['mzDeviation'] = None

        # set to None if rt_deviation (nullable) is None
        # and model_fields_set contains the field
        if self.rt_deviation is None and "rt_deviation" in self.model_fields_set:
            _dict['rtDeviation'] = None

        # set to None if isotope_pattern_score (nullable) is None
        # and model_fields_set contains the field
        if self.isotope_pattern_score is None and "isotope_pattern_score" in self.model_fields_set:
            _dict['isotopePatternScore'] = None

        # set to None if msms_score (nullable) is None
        # and model_fields_set contains the field
        if self.msms_score is None and "msms_score" in self.model_fields_set:
            _dict['msmsScore'] = None

        # set to None if ccs_deviation (nullable) is None
        # and model_fields_set contains the field
        if self.ccs_deviation is None and "ccs_deviation" in self.model_fields_set:
            _dict['ccsDeviation'] = None

        # set to None if annotation_modifiers (nullable) is None
        # and model_fields_set contains the field
        if self.annotation_modifiers is None and "annotation_modifiers" in self.model_fields_set:
            _dict['annotationModifiers'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AQScores from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "mzAQScore": obj.get("mzAQScore"),
            "rtAQScore": obj.get("rtAQScore"),
            "isotopePatternAQScore": obj.get("isotopePatternAQScore"),
            "msmsAQScore": obj.get("msmsAQScore"),
            "ccsAQScore": obj.get("ccsAQScore"),
            "mzDeviation": obj.get("mzDeviation"),
            "rtDeviation": obj.get("rtDeviation"),
            "isotopePatternScore": obj.get("isotopePatternScore"),
            "msmsScore": obj.get("msmsScore"),
            "ccsDeviation": obj.get("ccsDeviation"),
            "annotationModifiers": obj.get("annotationModifiers")
        })
        return _obj


