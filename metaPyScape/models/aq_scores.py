# coding: utf-8

"""
    MetaboScape REST Application

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2025b
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AQScores(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mz_aq_score': 'int',
        'rt_aq_score': 'int',
        'isotope_pattern_aq_score': 'int',
        'msms_aq_score': 'int',
        'ccs_aq_score': 'int',
        'mz_deviation': 'float',
        'rt_deviation': 'float',
        'isotope_pattern_score': 'float',
        'msms_score': 'float',
        'ccs_deviation': 'float',
        'annotation_modifiers': 'list[str]'
    }

    attribute_map = {
        'mz_aq_score': 'mzAQScore',
        'rt_aq_score': 'rtAQScore',
        'isotope_pattern_aq_score': 'isotopePatternAQScore',
        'msms_aq_score': 'msmsAQScore',
        'ccs_aq_score': 'ccsAQScore',
        'mz_deviation': 'mzDeviation',
        'rt_deviation': 'rtDeviation',
        'isotope_pattern_score': 'isotopePatternScore',
        'msms_score': 'msmsScore',
        'ccs_deviation': 'ccsDeviation',
        'annotation_modifiers': 'annotationModifiers'
    }

    def __init__(self, mz_aq_score=None, rt_aq_score=None, isotope_pattern_aq_score=None, msms_aq_score=None, ccs_aq_score=None, mz_deviation=None, rt_deviation=None, isotope_pattern_score=None, msms_score=None, ccs_deviation=None, annotation_modifiers=None):  # noqa: E501
        """AQScores - a model defined in Swagger"""  # noqa: E501
        self._mz_aq_score = None
        self._rt_aq_score = None
        self._isotope_pattern_aq_score = None
        self._msms_aq_score = None
        self._ccs_aq_score = None
        self._mz_deviation = None
        self._rt_deviation = None
        self._isotope_pattern_score = None
        self._msms_score = None
        self._ccs_deviation = None
        self._annotation_modifiers = None
        self.discriminator = None
        if mz_aq_score is not None:
            self.mz_aq_score = mz_aq_score
        if rt_aq_score is not None:
            self.rt_aq_score = rt_aq_score
        if isotope_pattern_aq_score is not None:
            self.isotope_pattern_aq_score = isotope_pattern_aq_score
        if msms_aq_score is not None:
            self.msms_aq_score = msms_aq_score
        if ccs_aq_score is not None:
            self.ccs_aq_score = ccs_aq_score
        if mz_deviation is not None:
            self.mz_deviation = mz_deviation
        if rt_deviation is not None:
            self.rt_deviation = rt_deviation
        if isotope_pattern_score is not None:
            self.isotope_pattern_score = isotope_pattern_score
        if msms_score is not None:
            self.msms_score = msms_score
        if ccs_deviation is not None:
            self.ccs_deviation = ccs_deviation
        if annotation_modifiers is not None:
            self.annotation_modifiers = annotation_modifiers

    @property
    def mz_aq_score(self):
        """Gets the mz_aq_score of this AQScores.  # noqa: E501


        :return: The mz_aq_score of this AQScores.  # noqa: E501
        :rtype: int
        """
        return self._mz_aq_score

    @mz_aq_score.setter
    def mz_aq_score(self, mz_aq_score):
        """Sets the mz_aq_score of this AQScores.


        :param mz_aq_score: The mz_aq_score of this AQScores.  # noqa: E501
        :type: int
        """

        self._mz_aq_score = mz_aq_score

    @property
    def rt_aq_score(self):
        """Gets the rt_aq_score of this AQScores.  # noqa: E501


        :return: The rt_aq_score of this AQScores.  # noqa: E501
        :rtype: int
        """
        return self._rt_aq_score

    @rt_aq_score.setter
    def rt_aq_score(self, rt_aq_score):
        """Sets the rt_aq_score of this AQScores.


        :param rt_aq_score: The rt_aq_score of this AQScores.  # noqa: E501
        :type: int
        """

        self._rt_aq_score = rt_aq_score

    @property
    def isotope_pattern_aq_score(self):
        """Gets the isotope_pattern_aq_score of this AQScores.  # noqa: E501


        :return: The isotope_pattern_aq_score of this AQScores.  # noqa: E501
        :rtype: int
        """
        return self._isotope_pattern_aq_score

    @isotope_pattern_aq_score.setter
    def isotope_pattern_aq_score(self, isotope_pattern_aq_score):
        """Sets the isotope_pattern_aq_score of this AQScores.


        :param isotope_pattern_aq_score: The isotope_pattern_aq_score of this AQScores.  # noqa: E501
        :type: int
        """

        self._isotope_pattern_aq_score = isotope_pattern_aq_score

    @property
    def msms_aq_score(self):
        """Gets the msms_aq_score of this AQScores.  # noqa: E501


        :return: The msms_aq_score of this AQScores.  # noqa: E501
        :rtype: int
        """
        return self._msms_aq_score

    @msms_aq_score.setter
    def msms_aq_score(self, msms_aq_score):
        """Sets the msms_aq_score of this AQScores.


        :param msms_aq_score: The msms_aq_score of this AQScores.  # noqa: E501
        :type: int
        """

        self._msms_aq_score = msms_aq_score

    @property
    def ccs_aq_score(self):
        """Gets the ccs_aq_score of this AQScores.  # noqa: E501


        :return: The ccs_aq_score of this AQScores.  # noqa: E501
        :rtype: int
        """
        return self._ccs_aq_score

    @ccs_aq_score.setter
    def ccs_aq_score(self, ccs_aq_score):
        """Sets the ccs_aq_score of this AQScores.


        :param ccs_aq_score: The ccs_aq_score of this AQScores.  # noqa: E501
        :type: int
        """

        self._ccs_aq_score = ccs_aq_score

    @property
    def mz_deviation(self):
        """Gets the mz_deviation of this AQScores.  # noqa: E501


        :return: The mz_deviation of this AQScores.  # noqa: E501
        :rtype: float
        """
        return self._mz_deviation

    @mz_deviation.setter
    def mz_deviation(self, mz_deviation):
        """Sets the mz_deviation of this AQScores.


        :param mz_deviation: The mz_deviation of this AQScores.  # noqa: E501
        :type: float
        """

        self._mz_deviation = mz_deviation

    @property
    def rt_deviation(self):
        """Gets the rt_deviation of this AQScores.  # noqa: E501


        :return: The rt_deviation of this AQScores.  # noqa: E501
        :rtype: float
        """
        return self._rt_deviation

    @rt_deviation.setter
    def rt_deviation(self, rt_deviation):
        """Sets the rt_deviation of this AQScores.


        :param rt_deviation: The rt_deviation of this AQScores.  # noqa: E501
        :type: float
        """

        self._rt_deviation = rt_deviation

    @property
    def isotope_pattern_score(self):
        """Gets the isotope_pattern_score of this AQScores.  # noqa: E501


        :return: The isotope_pattern_score of this AQScores.  # noqa: E501
        :rtype: float
        """
        return self._isotope_pattern_score

    @isotope_pattern_score.setter
    def isotope_pattern_score(self, isotope_pattern_score):
        """Sets the isotope_pattern_score of this AQScores.


        :param isotope_pattern_score: The isotope_pattern_score of this AQScores.  # noqa: E501
        :type: float
        """

        self._isotope_pattern_score = isotope_pattern_score

    @property
    def msms_score(self):
        """Gets the msms_score of this AQScores.  # noqa: E501


        :return: The msms_score of this AQScores.  # noqa: E501
        :rtype: float
        """
        return self._msms_score

    @msms_score.setter
    def msms_score(self, msms_score):
        """Sets the msms_score of this AQScores.


        :param msms_score: The msms_score of this AQScores.  # noqa: E501
        :type: float
        """

        self._msms_score = msms_score

    @property
    def ccs_deviation(self):
        """Gets the ccs_deviation of this AQScores.  # noqa: E501


        :return: The ccs_deviation of this AQScores.  # noqa: E501
        :rtype: float
        """
        return self._ccs_deviation

    @ccs_deviation.setter
    def ccs_deviation(self, ccs_deviation):
        """Sets the ccs_deviation of this AQScores.


        :param ccs_deviation: The ccs_deviation of this AQScores.  # noqa: E501
        :type: float
        """

        self._ccs_deviation = ccs_deviation

    @property
    def annotation_modifiers(self):
        """Gets the annotation_modifiers of this AQScores.  # noqa: E501


        :return: The annotation_modifiers of this AQScores.  # noqa: E501
        :rtype: list[str]
        """
        return self._annotation_modifiers

    @annotation_modifiers.setter
    def annotation_modifiers(self, annotation_modifiers):
        """Sets the annotation_modifiers of this AQScores.


        :param annotation_modifiers: The annotation_modifiers of this AQScores.  # noqa: E501
        :type: list[str]
        """

        self._annotation_modifiers = annotation_modifiers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AQScores, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AQScores):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
