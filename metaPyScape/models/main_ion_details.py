# coding: utf-8

"""
    MetaboScape REST Application

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2025b
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from metaPyScape.models.ms_ms_spectrum import MsMsSpectrum
from metaPyScape.models.ms_spectrum import MsSpectrum
from typing import Optional, Set
from typing_extensions import Self

class MainIonDetails(BaseModel):
    """
    MainIonDetails
    """ # noqa: E501
    feature_id: Optional[StrictStr] = Field(default=None, alias="featureId")
    main_ion_notation: Optional[StrictStr] = Field(default=None, alias="mainIonNotation")
    mz: Optional[Union[StrictFloat, StrictInt]] = None
    may_reassign_primary_ion: Optional[StrictBool] = Field(default=None, alias="mayReassignPrimaryIon")
    retention_time_in_seconds: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="retentionTimeInSeconds")
    ccs: Optional[Union[StrictFloat, StrictInt]] = None
    ms_spectrum: Optional[MsSpectrum] = Field(default=None, alias="msSpectrum")
    ms_ms_spectrum: Optional[MsMsSpectrum] = Field(default=None, alias="msMsSpectrum")
    ms_ms_spectrum_deiso: Optional[MsMsSpectrum] = Field(default=None, alias="msMsSpectrumDeiso")
    __properties: ClassVar[List[str]] = ["featureId", "mainIonNotation", "mz", "mayReassignPrimaryIon", "retentionTimeInSeconds", "ccs", "msSpectrum", "msMsSpectrum", "msMsSpectrumDeiso"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MainIonDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ms_spectrum
        if self.ms_spectrum:
            _dict['msSpectrum'] = self.ms_spectrum.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ms_ms_spectrum
        if self.ms_ms_spectrum:
            _dict['msMsSpectrum'] = self.ms_ms_spectrum.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ms_ms_spectrum_deiso
        if self.ms_ms_spectrum_deiso:
            _dict['msMsSpectrumDeiso'] = self.ms_ms_spectrum_deiso.to_dict()
        # set to None if retention_time_in_seconds (nullable) is None
        # and model_fields_set contains the field
        if self.retention_time_in_seconds is None and "retention_time_in_seconds" in self.model_fields_set:
            _dict['retentionTimeInSeconds'] = None

        # set to None if ccs (nullable) is None
        # and model_fields_set contains the field
        if self.ccs is None and "ccs" in self.model_fields_set:
            _dict['ccs'] = None

        # set to None if ms_spectrum (nullable) is None
        # and model_fields_set contains the field
        if self.ms_spectrum is None and "ms_spectrum" in self.model_fields_set:
            _dict['msSpectrum'] = None

        # set to None if ms_ms_spectrum (nullable) is None
        # and model_fields_set contains the field
        if self.ms_ms_spectrum is None and "ms_ms_spectrum" in self.model_fields_set:
            _dict['msMsSpectrum'] = None

        # set to None if ms_ms_spectrum_deiso (nullable) is None
        # and model_fields_set contains the field
        if self.ms_ms_spectrum_deiso is None and "ms_ms_spectrum_deiso" in self.model_fields_set:
            _dict['msMsSpectrumDeiso'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MainIonDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "featureId": obj.get("featureId"),
            "mainIonNotation": obj.get("mainIonNotation"),
            "mz": obj.get("mz"),
            "mayReassignPrimaryIon": obj.get("mayReassignPrimaryIon"),
            "retentionTimeInSeconds": obj.get("retentionTimeInSeconds"),
            "ccs": obj.get("ccs"),
            "msSpectrum": MsSpectrum.from_dict(obj["msSpectrum"]) if obj.get("msSpectrum") is not None else None,
            "msMsSpectrum": MsMsSpectrum.from_dict(obj["msMsSpectrum"]) if obj.get("msMsSpectrum") is not None else None,
            "msMsSpectrumDeiso": MsMsSpectrum.from_dict(obj["msMsSpectrumDeiso"]) if obj.get("msMsSpectrumDeiso") is not None else None
        })
        return _obj


