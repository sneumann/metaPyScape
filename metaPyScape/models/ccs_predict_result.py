# coding: utf-8

"""
    MetaboScape REST Application

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2025b
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CCSPredictResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'structure': 'Structure',
        'ion_notation': 'str',
        'predicted_ccs': 'float',
        'result_message': 'str'
    }

    attribute_map = {
        'structure': 'structure',
        'ion_notation': 'ionNotation',
        'predicted_ccs': 'predictedCcs',
        'result_message': 'resultMessage'
    }

    def __init__(self, structure=None, ion_notation=None, predicted_ccs=None, result_message=None):  # noqa: E501
        """CCSPredictResult - a model defined in Swagger"""  # noqa: E501
        self._structure = None
        self._ion_notation = None
        self._predicted_ccs = None
        self._result_message = None
        self.discriminator = None
        if structure is not None:
            self.structure = structure
        if ion_notation is not None:
            self.ion_notation = ion_notation
        if predicted_ccs is not None:
            self.predicted_ccs = predicted_ccs
        if result_message is not None:
            self.result_message = result_message

    @property
    def structure(self):
        """Gets the structure of this CCSPredictResult.  # noqa: E501


        :return: The structure of this CCSPredictResult.  # noqa: E501
        :rtype: Structure
        """
        return self._structure

    @structure.setter
    def structure(self, structure):
        """Sets the structure of this CCSPredictResult.


        :param structure: The structure of this CCSPredictResult.  # noqa: E501
        :type: Structure
        """

        self._structure = structure

    @property
    def ion_notation(self):
        """Gets the ion_notation of this CCSPredictResult.  # noqa: E501


        :return: The ion_notation of this CCSPredictResult.  # noqa: E501
        :rtype: str
        """
        return self._ion_notation

    @ion_notation.setter
    def ion_notation(self, ion_notation):
        """Sets the ion_notation of this CCSPredictResult.


        :param ion_notation: The ion_notation of this CCSPredictResult.  # noqa: E501
        :type: str
        """

        self._ion_notation = ion_notation

    @property
    def predicted_ccs(self):
        """Gets the predicted_ccs of this CCSPredictResult.  # noqa: E501


        :return: The predicted_ccs of this CCSPredictResult.  # noqa: E501
        :rtype: float
        """
        return self._predicted_ccs

    @predicted_ccs.setter
    def predicted_ccs(self, predicted_ccs):
        """Sets the predicted_ccs of this CCSPredictResult.


        :param predicted_ccs: The predicted_ccs of this CCSPredictResult.  # noqa: E501
        :type: float
        """

        self._predicted_ccs = predicted_ccs

    @property
    def result_message(self):
        """Gets the result_message of this CCSPredictResult.  # noqa: E501


        :return: The result_message of this CCSPredictResult.  # noqa: E501
        :rtype: str
        """
        return self._result_message

    @result_message.setter
    def result_message(self, result_message):
        """Sets the result_message of this CCSPredictResult.


        :param result_message: The result_message of this CCSPredictResult.  # noqa: E501
        :type: str
        """

        self._result_message = result_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CCSPredictResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CCSPredictResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
