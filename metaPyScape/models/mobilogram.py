# coding: utf-8

"""
    MetaboScape REST Application

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2025b
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Mobilogram(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'inverse_ion_mobilities': 'list[float]',
        'intensities': 'list[float]',
        'analysis_id': 'str'
    }

    attribute_map = {
        'inverse_ion_mobilities': 'inverseIonMobilities',
        'intensities': 'intensities',
        'analysis_id': 'analysisId'
    }

    def __init__(self, inverse_ion_mobilities=None, intensities=None, analysis_id=None):  # noqa: E501
        """Mobilogram - a model defined in Swagger"""  # noqa: E501
        self._inverse_ion_mobilities = None
        self._intensities = None
        self._analysis_id = None
        self.discriminator = None
        if inverse_ion_mobilities is not None:
            self.inverse_ion_mobilities = inverse_ion_mobilities
        if intensities is not None:
            self.intensities = intensities
        if analysis_id is not None:
            self.analysis_id = analysis_id

    @property
    def inverse_ion_mobilities(self):
        """Gets the inverse_ion_mobilities of this Mobilogram.  # noqa: E501


        :return: The inverse_ion_mobilities of this Mobilogram.  # noqa: E501
        :rtype: list[float]
        """
        return self._inverse_ion_mobilities

    @inverse_ion_mobilities.setter
    def inverse_ion_mobilities(self, inverse_ion_mobilities):
        """Sets the inverse_ion_mobilities of this Mobilogram.


        :param inverse_ion_mobilities: The inverse_ion_mobilities of this Mobilogram.  # noqa: E501
        :type: list[float]
        """

        self._inverse_ion_mobilities = inverse_ion_mobilities

    @property
    def intensities(self):
        """Gets the intensities of this Mobilogram.  # noqa: E501


        :return: The intensities of this Mobilogram.  # noqa: E501
        :rtype: list[float]
        """
        return self._intensities

    @intensities.setter
    def intensities(self, intensities):
        """Sets the intensities of this Mobilogram.


        :param intensities: The intensities of this Mobilogram.  # noqa: E501
        :type: list[float]
        """

        self._intensities = intensities

    @property
    def analysis_id(self):
        """Gets the analysis_id of this Mobilogram.  # noqa: E501


        :return: The analysis_id of this Mobilogram.  # noqa: E501
        :rtype: str
        """
        return self._analysis_id

    @analysis_id.setter
    def analysis_id(self, analysis_id):
        """Sets the analysis_id of this Mobilogram.


        :param analysis_id: The analysis_id of this Mobilogram.  # noqa: E501
        :type: str
        """

        self._analysis_id = analysis_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Mobilogram, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Mobilogram):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
