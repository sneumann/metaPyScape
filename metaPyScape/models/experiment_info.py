# coding: utf-8

"""
    MetaboScape REST Application

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2025b
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExperimentInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'experiment_id': 'str',
        'name': 'str',
        'group_colors': 'str',
        'group_symbols': 'str',
        'creation_date': 'int',
        'samples': 'list[SampleInfo]'
    }

    attribute_map = {
        'experiment_id': 'experimentId',
        'name': 'name',
        'group_colors': 'groupColors',
        'group_symbols': 'groupSymbols',
        'creation_date': 'creationDate',
        'samples': 'samples'
    }

    def __init__(self, experiment_id=None, name=None, group_colors=None, group_symbols=None, creation_date=None, samples=None):  # noqa: E501
        """ExperimentInfo - a model defined in Swagger"""  # noqa: E501
        self._experiment_id = None
        self._name = None
        self._group_colors = None
        self._group_symbols = None
        self._creation_date = None
        self._samples = None
        self.discriminator = None
        if experiment_id is not None:
            self.experiment_id = experiment_id
        if name is not None:
            self.name = name
        if group_colors is not None:
            self.group_colors = group_colors
        if group_symbols is not None:
            self.group_symbols = group_symbols
        if creation_date is not None:
            self.creation_date = creation_date
        if samples is not None:
            self.samples = samples

    @property
    def experiment_id(self):
        """Gets the experiment_id of this ExperimentInfo.  # noqa: E501


        :return: The experiment_id of this ExperimentInfo.  # noqa: E501
        :rtype: str
        """
        return self._experiment_id

    @experiment_id.setter
    def experiment_id(self, experiment_id):
        """Sets the experiment_id of this ExperimentInfo.


        :param experiment_id: The experiment_id of this ExperimentInfo.  # noqa: E501
        :type: str
        """

        self._experiment_id = experiment_id

    @property
    def name(self):
        """Gets the name of this ExperimentInfo.  # noqa: E501


        :return: The name of this ExperimentInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExperimentInfo.


        :param name: The name of this ExperimentInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def group_colors(self):
        """Gets the group_colors of this ExperimentInfo.  # noqa: E501


        :return: The group_colors of this ExperimentInfo.  # noqa: E501
        :rtype: str
        """
        return self._group_colors

    @group_colors.setter
    def group_colors(self, group_colors):
        """Sets the group_colors of this ExperimentInfo.


        :param group_colors: The group_colors of this ExperimentInfo.  # noqa: E501
        :type: str
        """

        self._group_colors = group_colors

    @property
    def group_symbols(self):
        """Gets the group_symbols of this ExperimentInfo.  # noqa: E501


        :return: The group_symbols of this ExperimentInfo.  # noqa: E501
        :rtype: str
        """
        return self._group_symbols

    @group_symbols.setter
    def group_symbols(self, group_symbols):
        """Sets the group_symbols of this ExperimentInfo.


        :param group_symbols: The group_symbols of this ExperimentInfo.  # noqa: E501
        :type: str
        """

        self._group_symbols = group_symbols

    @property
    def creation_date(self):
        """Gets the creation_date of this ExperimentInfo.  # noqa: E501


        :return: The creation_date of this ExperimentInfo.  # noqa: E501
        :rtype: int
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this ExperimentInfo.


        :param creation_date: The creation_date of this ExperimentInfo.  # noqa: E501
        :type: int
        """

        self._creation_date = creation_date

    @property
    def samples(self):
        """Gets the samples of this ExperimentInfo.  # noqa: E501


        :return: The samples of this ExperimentInfo.  # noqa: E501
        :rtype: list[SampleInfo]
        """
        return self._samples

    @samples.setter
    def samples(self, samples):
        """Sets the samples of this ExperimentInfo.


        :param samples: The samples of this ExperimentInfo.  # noqa: E501
        :type: list[SampleInfo]
        """

        self._samples = samples

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExperimentInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExperimentInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
