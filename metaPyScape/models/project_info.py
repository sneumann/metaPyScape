# coding: utf-8

"""
    MetaboScape REST Application

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2025b
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProjectInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_id': 'str',
        'name': 'str',
        'description': 'str',
        'owner': 'str',
        'experiments': 'list[ExperimentInfo]',
        'creation_date': 'int',
        'attribute': 'list[SampleAttributeType]'
    }

    attribute_map = {
        'project_id': 'projectId',
        'name': 'name',
        'description': 'description',
        'owner': 'owner',
        'experiments': 'experiments',
        'creation_date': 'creationDate',
        'attribute': 'attribute'
    }

    def __init__(self, project_id=None, name=None, description=None, owner=None, experiments=None, creation_date=None, attribute=None):  # noqa: E501
        """ProjectInfo - a model defined in Swagger"""  # noqa: E501
        self._project_id = None
        self._name = None
        self._description = None
        self._owner = None
        self._experiments = None
        self._creation_date = None
        self._attribute = None
        self.discriminator = None
        if project_id is not None:
            self.project_id = project_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if owner is not None:
            self.owner = owner
        if experiments is not None:
            self.experiments = experiments
        if creation_date is not None:
            self.creation_date = creation_date
        if attribute is not None:
            self.attribute = attribute

    @property
    def project_id(self):
        """Gets the project_id of this ProjectInfo.  # noqa: E501


        :return: The project_id of this ProjectInfo.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ProjectInfo.


        :param project_id: The project_id of this ProjectInfo.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def name(self):
        """Gets the name of this ProjectInfo.  # noqa: E501


        :return: The name of this ProjectInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectInfo.


        :param name: The name of this ProjectInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ProjectInfo.  # noqa: E501


        :return: The description of this ProjectInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProjectInfo.


        :param description: The description of this ProjectInfo.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def owner(self):
        """Gets the owner of this ProjectInfo.  # noqa: E501


        :return: The owner of this ProjectInfo.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this ProjectInfo.


        :param owner: The owner of this ProjectInfo.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def experiments(self):
        """Gets the experiments of this ProjectInfo.  # noqa: E501


        :return: The experiments of this ProjectInfo.  # noqa: E501
        :rtype: list[ExperimentInfo]
        """
        return self._experiments

    @experiments.setter
    def experiments(self, experiments):
        """Sets the experiments of this ProjectInfo.


        :param experiments: The experiments of this ProjectInfo.  # noqa: E501
        :type: list[ExperimentInfo]
        """

        self._experiments = experiments

    @property
    def creation_date(self):
        """Gets the creation_date of this ProjectInfo.  # noqa: E501


        :return: The creation_date of this ProjectInfo.  # noqa: E501
        :rtype: int
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this ProjectInfo.


        :param creation_date: The creation_date of this ProjectInfo.  # noqa: E501
        :type: int
        """

        self._creation_date = creation_date

    @property
    def attribute(self):
        """Gets the attribute of this ProjectInfo.  # noqa: E501


        :return: The attribute of this ProjectInfo.  # noqa: E501
        :rtype: list[SampleAttributeType]
        """
        return self._attribute

    @attribute.setter
    def attribute(self, attribute):
        """Sets the attribute of this ProjectInfo.


        :param attribute: The attribute of this ProjectInfo.  # noqa: E501
        :type: list[SampleAttributeType]
        """

        self._attribute = attribute

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
