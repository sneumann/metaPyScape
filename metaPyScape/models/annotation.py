# coding: utf-8

"""
    MetaboScape REST Application

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2025b
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from metaPyScape.models.annotated_ms_ms_fragment_details import AnnotatedMsMsFragmentDetails
from metaPyScape.models.aq_scores import AQScores
from metaPyScape.models.database_identifier import DatabaseIdentifier
from typing import Optional, Set
from typing_extensions import Self

class Annotation(BaseModel):
    """
    Annotation
    """ # noqa: E501
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    formula: Optional[StrictStr] = None
    aq_scores: Optional[AQScores] = Field(default=None, alias="aqScores")
    tool: Optional[StrictStr] = None
    structure_inchi: Optional[StrictStr] = Field(default=None, alias="structureInchi")
    structure_smiles: Optional[StrictStr] = Field(default=None, alias="structureSmiles")
    database_identifiers: Optional[List[Optional[DatabaseIdentifier]]] = Field(default=None, alias="databaseIdentifiers")
    annotated_ms_ms_fragment_details: Optional[List[Optional[AnnotatedMsMsFragmentDetails]]] = Field(default=None, alias="annotatedMsMsFragmentDetails")
    __properties: ClassVar[List[str]] = ["id", "name", "formula", "aqScores", "tool", "structureInchi", "structureSmiles", "databaseIdentifiers", "annotatedMsMsFragmentDetails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Annotation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aq_scores
        if self.aq_scores:
            _dict['aqScores'] = self.aq_scores.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in database_identifiers (list)
        _items = []
        if self.database_identifiers:
            for _item_database_identifiers in self.database_identifiers:
                if _item_database_identifiers:
                    _items.append(_item_database_identifiers.to_dict())
            _dict['databaseIdentifiers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in annotated_ms_ms_fragment_details (list)
        _items = []
        if self.annotated_ms_ms_fragment_details:
            for _item_annotated_ms_ms_fragment_details in self.annotated_ms_ms_fragment_details:
                if _item_annotated_ms_ms_fragment_details:
                    _items.append(_item_annotated_ms_ms_fragment_details.to_dict())
            _dict['annotatedMsMsFragmentDetails'] = _items
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if aq_scores (nullable) is None
        # and model_fields_set contains the field
        if self.aq_scores is None and "aq_scores" in self.model_fields_set:
            _dict['aqScores'] = None

        # set to None if structure_inchi (nullable) is None
        # and model_fields_set contains the field
        if self.structure_inchi is None and "structure_inchi" in self.model_fields_set:
            _dict['structureInchi'] = None

        # set to None if structure_smiles (nullable) is None
        # and model_fields_set contains the field
        if self.structure_smiles is None and "structure_smiles" in self.model_fields_set:
            _dict['structureSmiles'] = None

        # set to None if database_identifiers (nullable) is None
        # and model_fields_set contains the field
        if self.database_identifiers is None and "database_identifiers" in self.model_fields_set:
            _dict['databaseIdentifiers'] = None

        # set to None if annotated_ms_ms_fragment_details (nullable) is None
        # and model_fields_set contains the field
        if self.annotated_ms_ms_fragment_details is None and "annotated_ms_ms_fragment_details" in self.model_fields_set:
            _dict['annotatedMsMsFragmentDetails'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Annotation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "formula": obj.get("formula"),
            "aqScores": AQScores.from_dict(obj["aqScores"]) if obj.get("aqScores") is not None else None,
            "tool": obj.get("tool"),
            "structureInchi": obj.get("structureInchi"),
            "structureSmiles": obj.get("structureSmiles"),
            "databaseIdentifiers": [DatabaseIdentifier.from_dict(_item) for _item in obj["databaseIdentifiers"]] if obj.get("databaseIdentifiers") is not None else None,
            "annotatedMsMsFragmentDetails": [AnnotatedMsMsFragmentDetails.from_dict(_item) for _item in obj["annotatedMsMsFragmentDetails"]] if obj.get("annotatedMsMsFragmentDetails") is not None else None
        })
        return _obj


