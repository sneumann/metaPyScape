# coding: utf-8

"""
    MetaboScape REST Application

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2025b
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Annotation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'formula': 'str',
        'aq_scores': 'AQScores',
        'tool': 'str',
        'structure_inchi': 'str',
        'structure_smiles': 'str',
        'database_identifiers': 'list[DatabaseIdentifier]',
        'annotated_ms_ms_fragment_details': 'list[AnnotatedMsMsFragmentDetails]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'formula': 'formula',
        'aq_scores': 'aqScores',
        'tool': 'tool',
        'structure_inchi': 'structureInchi',
        'structure_smiles': 'structureSmiles',
        'database_identifiers': 'databaseIdentifiers',
        'annotated_ms_ms_fragment_details': 'annotatedMsMsFragmentDetails'
    }

    def __init__(self, id=None, name=None, formula=None, aq_scores=None, tool=None, structure_inchi=None, structure_smiles=None, database_identifiers=None, annotated_ms_ms_fragment_details=None):  # noqa: E501
        """Annotation - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._formula = None
        self._aq_scores = None
        self._tool = None
        self._structure_inchi = None
        self._structure_smiles = None
        self._database_identifiers = None
        self._annotated_ms_ms_fragment_details = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if formula is not None:
            self.formula = formula
        if aq_scores is not None:
            self.aq_scores = aq_scores
        if tool is not None:
            self.tool = tool
        if structure_inchi is not None:
            self.structure_inchi = structure_inchi
        if structure_smiles is not None:
            self.structure_smiles = structure_smiles
        if database_identifiers is not None:
            self.database_identifiers = database_identifiers
        if annotated_ms_ms_fragment_details is not None:
            self.annotated_ms_ms_fragment_details = annotated_ms_ms_fragment_details

    @property
    def id(self):
        """Gets the id of this Annotation.  # noqa: E501


        :return: The id of this Annotation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Annotation.


        :param id: The id of this Annotation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Annotation.  # noqa: E501


        :return: The name of this Annotation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Annotation.


        :param name: The name of this Annotation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def formula(self):
        """Gets the formula of this Annotation.  # noqa: E501


        :return: The formula of this Annotation.  # noqa: E501
        :rtype: str
        """
        return self._formula

    @formula.setter
    def formula(self, formula):
        """Sets the formula of this Annotation.


        :param formula: The formula of this Annotation.  # noqa: E501
        :type: str
        """

        self._formula = formula

    @property
    def aq_scores(self):
        """Gets the aq_scores of this Annotation.  # noqa: E501


        :return: The aq_scores of this Annotation.  # noqa: E501
        :rtype: AQScores
        """
        return self._aq_scores

    @aq_scores.setter
    def aq_scores(self, aq_scores):
        """Sets the aq_scores of this Annotation.


        :param aq_scores: The aq_scores of this Annotation.  # noqa: E501
        :type: AQScores
        """

        self._aq_scores = aq_scores

    @property
    def tool(self):
        """Gets the tool of this Annotation.  # noqa: E501


        :return: The tool of this Annotation.  # noqa: E501
        :rtype: str
        """
        return self._tool

    @tool.setter
    def tool(self, tool):
        """Sets the tool of this Annotation.


        :param tool: The tool of this Annotation.  # noqa: E501
        :type: str
        """

        self._tool = tool

    @property
    def structure_inchi(self):
        """Gets the structure_inchi of this Annotation.  # noqa: E501


        :return: The structure_inchi of this Annotation.  # noqa: E501
        :rtype: str
        """
        return self._structure_inchi

    @structure_inchi.setter
    def structure_inchi(self, structure_inchi):
        """Sets the structure_inchi of this Annotation.


        :param structure_inchi: The structure_inchi of this Annotation.  # noqa: E501
        :type: str
        """

        self._structure_inchi = structure_inchi

    @property
    def structure_smiles(self):
        """Gets the structure_smiles of this Annotation.  # noqa: E501


        :return: The structure_smiles of this Annotation.  # noqa: E501
        :rtype: str
        """
        return self._structure_smiles

    @structure_smiles.setter
    def structure_smiles(self, structure_smiles):
        """Sets the structure_smiles of this Annotation.


        :param structure_smiles: The structure_smiles of this Annotation.  # noqa: E501
        :type: str
        """

        self._structure_smiles = structure_smiles

    @property
    def database_identifiers(self):
        """Gets the database_identifiers of this Annotation.  # noqa: E501


        :return: The database_identifiers of this Annotation.  # noqa: E501
        :rtype: list[DatabaseIdentifier]
        """
        return self._database_identifiers

    @database_identifiers.setter
    def database_identifiers(self, database_identifiers):
        """Sets the database_identifiers of this Annotation.


        :param database_identifiers: The database_identifiers of this Annotation.  # noqa: E501
        :type: list[DatabaseIdentifier]
        """

        self._database_identifiers = database_identifiers

    @property
    def annotated_ms_ms_fragment_details(self):
        """Gets the annotated_ms_ms_fragment_details of this Annotation.  # noqa: E501


        :return: The annotated_ms_ms_fragment_details of this Annotation.  # noqa: E501
        :rtype: list[AnnotatedMsMsFragmentDetails]
        """
        return self._annotated_ms_ms_fragment_details

    @annotated_ms_ms_fragment_details.setter
    def annotated_ms_ms_fragment_details(self, annotated_ms_ms_fragment_details):
        """Sets the annotated_ms_ms_fragment_details of this Annotation.


        :param annotated_ms_ms_fragment_details: The annotated_ms_ms_fragment_details of this Annotation.  # noqa: E501
        :type: list[AnnotatedMsMsFragmentDetails]
        """

        self._annotated_ms_ms_fragment_details = annotated_ms_ms_fragment_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Annotation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Annotation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
