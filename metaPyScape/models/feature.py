# coding: utf-8

"""
    MetaboScape REST Application

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2025b
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from metaPyScape.models.annotation import Annotation
from metaPyScape.models.feature_ion import FeatureIon
from typing import Optional, Set
from typing_extensions import Self

class Feature(BaseModel):
    """
    Feature
    """ # noqa: E501
    id: Optional[StrictStr] = None
    rt_in_seconds: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="rtInSeconds")
    mass: Optional[Union[StrictFloat, StrictInt]] = None
    feature_ions: Optional[List[FeatureIon]] = Field(default=None, alias="featureIons")
    primary_annotation: Optional[Annotation] = Field(default=None, alias="primaryAnnotation")
    all_annotations: Optional[List[Annotation]] = Field(default=None, alias="allAnnotations")
    user_flags: Optional[List[Optional[StrictStr]]] = Field(default=None, alias="userFlags")
    __properties: ClassVar[List[str]] = ["id", "rtInSeconds", "mass", "featureIons", "primaryAnnotation", "allAnnotations", "userFlags"]

    @field_validator('user_flags')
    def user_flags_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['RED', 'BLUE', 'GREEN', 'ORANGE', 'PURPLE', 'YELLOW']):
                raise ValueError("each list item must be one of ('RED', 'BLUE', 'GREEN', 'ORANGE', 'PURPLE', 'YELLOW')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Feature from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in feature_ions (list)
        _items = []
        if self.feature_ions:
            for _item_feature_ions in self.feature_ions:
                if _item_feature_ions:
                    _items.append(_item_feature_ions.to_dict())
            _dict['featureIons'] = _items
        # override the default output from pydantic by calling `to_dict()` of primary_annotation
        if self.primary_annotation:
            _dict['primaryAnnotation'] = self.primary_annotation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in all_annotations (list)
        _items = []
        if self.all_annotations:
            for _item_all_annotations in self.all_annotations:
                if _item_all_annotations:
                    _items.append(_item_all_annotations.to_dict())
            _dict['allAnnotations'] = _items
        # set to None if all_annotations (nullable) is None
        # and model_fields_set contains the field
        if self.all_annotations is None and "all_annotations" in self.model_fields_set:
            _dict['allAnnotations'] = None

        # set to None if user_flags (nullable) is None
        # and model_fields_set contains the field
        if self.user_flags is None and "user_flags" in self.model_fields_set:
            _dict['userFlags'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Feature from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "rtInSeconds": obj.get("rtInSeconds"),
            "mass": obj.get("mass"),
            "featureIons": [FeatureIon.from_dict(_item) for _item in obj["featureIons"]] if obj.get("featureIons") is not None else None,
            "primaryAnnotation": Annotation.from_dict(obj["primaryAnnotation"]) if obj.get("primaryAnnotation") is not None else None,
            "allAnnotations": [Annotation.from_dict(_item) for _item in obj["allAnnotations"]] if obj.get("allAnnotations") is not None else None,
            "userFlags": obj.get("userFlags")
        })
        return _obj


