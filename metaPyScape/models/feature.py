# coding: utf-8

"""
    MetaboScape REST Application

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2025b
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Feature(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'rt_in_seconds': 'float',
        'mass': 'float',
        'feature_ions': 'list[FeatureIon]',
        'primary_annotation': 'Annotation',
        'all_annotations': 'list[Annotation]',
        'user_flags': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'rt_in_seconds': 'rtInSeconds',
        'mass': 'mass',
        'feature_ions': 'featureIons',
        'primary_annotation': 'primaryAnnotation',
        'all_annotations': 'allAnnotations',
        'user_flags': 'userFlags'
    }

    def __init__(self, id=None, rt_in_seconds=None, mass=None, feature_ions=None, primary_annotation=None, all_annotations=None, user_flags=None):  # noqa: E501
        """Feature - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._rt_in_seconds = None
        self._mass = None
        self._feature_ions = None
        self._primary_annotation = None
        self._all_annotations = None
        self._user_flags = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if rt_in_seconds is not None:
            self.rt_in_seconds = rt_in_seconds
        if mass is not None:
            self.mass = mass
        if feature_ions is not None:
            self.feature_ions = feature_ions
        if primary_annotation is not None:
            self.primary_annotation = primary_annotation
        if all_annotations is not None:
            self.all_annotations = all_annotations
        if user_flags is not None:
            self.user_flags = user_flags

    @property
    def id(self):
        """Gets the id of this Feature.  # noqa: E501


        :return: The id of this Feature.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Feature.


        :param id: The id of this Feature.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def rt_in_seconds(self):
        """Gets the rt_in_seconds of this Feature.  # noqa: E501


        :return: The rt_in_seconds of this Feature.  # noqa: E501
        :rtype: float
        """
        return self._rt_in_seconds

    @rt_in_seconds.setter
    def rt_in_seconds(self, rt_in_seconds):
        """Sets the rt_in_seconds of this Feature.


        :param rt_in_seconds: The rt_in_seconds of this Feature.  # noqa: E501
        :type: float
        """

        self._rt_in_seconds = rt_in_seconds

    @property
    def mass(self):
        """Gets the mass of this Feature.  # noqa: E501


        :return: The mass of this Feature.  # noqa: E501
        :rtype: float
        """
        return self._mass

    @mass.setter
    def mass(self, mass):
        """Sets the mass of this Feature.


        :param mass: The mass of this Feature.  # noqa: E501
        :type: float
        """

        self._mass = mass

    @property
    def feature_ions(self):
        """Gets the feature_ions of this Feature.  # noqa: E501


        :return: The feature_ions of this Feature.  # noqa: E501
        :rtype: list[FeatureIon]
        """
        return self._feature_ions

    @feature_ions.setter
    def feature_ions(self, feature_ions):
        """Sets the feature_ions of this Feature.


        :param feature_ions: The feature_ions of this Feature.  # noqa: E501
        :type: list[FeatureIon]
        """

        self._feature_ions = feature_ions

    @property
    def primary_annotation(self):
        """Gets the primary_annotation of this Feature.  # noqa: E501


        :return: The primary_annotation of this Feature.  # noqa: E501
        :rtype: Annotation
        """
        return self._primary_annotation

    @primary_annotation.setter
    def primary_annotation(self, primary_annotation):
        """Sets the primary_annotation of this Feature.


        :param primary_annotation: The primary_annotation of this Feature.  # noqa: E501
        :type: Annotation
        """

        self._primary_annotation = primary_annotation

    @property
    def all_annotations(self):
        """Gets the all_annotations of this Feature.  # noqa: E501


        :return: The all_annotations of this Feature.  # noqa: E501
        :rtype: list[Annotation]
        """
        return self._all_annotations

    @all_annotations.setter
    def all_annotations(self, all_annotations):
        """Sets the all_annotations of this Feature.


        :param all_annotations: The all_annotations of this Feature.  # noqa: E501
        :type: list[Annotation]
        """

        self._all_annotations = all_annotations

    @property
    def user_flags(self):
        """Gets the user_flags of this Feature.  # noqa: E501


        :return: The user_flags of this Feature.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_flags

    @user_flags.setter
    def user_flags(self, user_flags):
        """Sets the user_flags of this Feature.


        :param user_flags: The user_flags of this Feature.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["RED", "BLUE", "GREEN", "ORANGE", "PURPLE", "YELLOW"]  # noqa: E501
        if not set(user_flags).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `user_flags` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(user_flags) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._user_flags = user_flags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Feature, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Feature):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
