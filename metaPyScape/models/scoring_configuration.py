# coding: utf-8

"""
    MetaboScape REST Application

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2025b
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ScoringConfiguration(BaseModel):
    """
    ScoringConfiguration
    """ # noqa: E501
    mz_wide: Union[StrictFloat, StrictInt] = Field(alias="mzWide")
    mz_narrow: Union[StrictFloat, StrictInt] = Field(alias="mzNarrow")
    mz_unit: StrictStr = Field(alias="mzUnit")
    rt_in_seconds_narrow: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="rtInSecondsNarrow")
    rt_in_seconds_wide: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="rtInSecondsWide")
    ms_ms_wide: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="msMsWide")
    ms_ms_narrow: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="msMsNarrow")
    ccs_wide: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ccsWide")
    ccs_narrow: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ccsNarrow")
    msigma_narrow: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="msigmaNarrow")
    msigma_wide: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="msigmaWide")
    __properties: ClassVar[List[str]] = ["mzWide", "mzNarrow", "mzUnit", "rtInSecondsNarrow", "rtInSecondsWide", "msMsWide", "msMsNarrow", "ccsWide", "ccsNarrow", "msigmaNarrow", "msigmaWide"]

    @field_validator('mz_unit')
    def mz_unit_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['DA', 'MDA', 'PPM']):
            raise ValueError("must be one of enum values ('DA', 'MDA', 'PPM')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScoringConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if rt_in_seconds_narrow (nullable) is None
        # and model_fields_set contains the field
        if self.rt_in_seconds_narrow is None and "rt_in_seconds_narrow" in self.model_fields_set:
            _dict['rtInSecondsNarrow'] = None

        # set to None if rt_in_seconds_wide (nullable) is None
        # and model_fields_set contains the field
        if self.rt_in_seconds_wide is None and "rt_in_seconds_wide" in self.model_fields_set:
            _dict['rtInSecondsWide'] = None

        # set to None if ms_ms_wide (nullable) is None
        # and model_fields_set contains the field
        if self.ms_ms_wide is None and "ms_ms_wide" in self.model_fields_set:
            _dict['msMsWide'] = None

        # set to None if ms_ms_narrow (nullable) is None
        # and model_fields_set contains the field
        if self.ms_ms_narrow is None and "ms_ms_narrow" in self.model_fields_set:
            _dict['msMsNarrow'] = None

        # set to None if ccs_wide (nullable) is None
        # and model_fields_set contains the field
        if self.ccs_wide is None and "ccs_wide" in self.model_fields_set:
            _dict['ccsWide'] = None

        # set to None if ccs_narrow (nullable) is None
        # and model_fields_set contains the field
        if self.ccs_narrow is None and "ccs_narrow" in self.model_fields_set:
            _dict['ccsNarrow'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScoringConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "mzWide": obj.get("mzWide"),
            "mzNarrow": obj.get("mzNarrow"),
            "mzUnit": obj.get("mzUnit"),
            "rtInSecondsNarrow": obj.get("rtInSecondsNarrow"),
            "rtInSecondsWide": obj.get("rtInSecondsWide"),
            "msMsWide": obj.get("msMsWide"),
            "msMsNarrow": obj.get("msMsNarrow"),
            "ccsWide": obj.get("ccsWide"),
            "ccsNarrow": obj.get("ccsNarrow"),
            "msigmaNarrow": obj.get("msigmaNarrow"),
            "msigmaWide": obj.get("msigmaWide")
        })
        return _obj


