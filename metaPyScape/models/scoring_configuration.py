# coding: utf-8

"""
    MetaboScape REST Application

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2025b
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScoringConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mz_wide': 'float',
        'mz_narrow': 'float',
        'mz_unit': 'str',
        'rt_in_seconds_narrow': 'float',
        'rt_in_seconds_wide': 'float',
        'ms_ms_wide': 'float',
        'ms_ms_narrow': 'float',
        'ccs_wide': 'float',
        'ccs_narrow': 'float',
        'msigma_narrow': 'float',
        'msigma_wide': 'float'
    }

    attribute_map = {
        'mz_wide': 'mzWide',
        'mz_narrow': 'mzNarrow',
        'mz_unit': 'mzUnit',
        'rt_in_seconds_narrow': 'rtInSecondsNarrow',
        'rt_in_seconds_wide': 'rtInSecondsWide',
        'ms_ms_wide': 'msMsWide',
        'ms_ms_narrow': 'msMsNarrow',
        'ccs_wide': 'ccsWide',
        'ccs_narrow': 'ccsNarrow',
        'msigma_narrow': 'msigmaNarrow',
        'msigma_wide': 'msigmaWide'
    }

    def __init__(self, mz_wide=None, mz_narrow=None, mz_unit=None, rt_in_seconds_narrow=None, rt_in_seconds_wide=None, ms_ms_wide=None, ms_ms_narrow=None, ccs_wide=None, ccs_narrow=None, msigma_narrow=None, msigma_wide=None):  # noqa: E501
        """ScoringConfiguration - a model defined in Swagger"""  # noqa: E501
        self._mz_wide = None
        self._mz_narrow = None
        self._mz_unit = None
        self._rt_in_seconds_narrow = None
        self._rt_in_seconds_wide = None
        self._ms_ms_wide = None
        self._ms_ms_narrow = None
        self._ccs_wide = None
        self._ccs_narrow = None
        self._msigma_narrow = None
        self._msigma_wide = None
        self.discriminator = None
        self.mz_wide = mz_wide
        self.mz_narrow = mz_narrow
        self.mz_unit = mz_unit
        if rt_in_seconds_narrow is not None:
            self.rt_in_seconds_narrow = rt_in_seconds_narrow
        if rt_in_seconds_wide is not None:
            self.rt_in_seconds_wide = rt_in_seconds_wide
        if ms_ms_wide is not None:
            self.ms_ms_wide = ms_ms_wide
        if ms_ms_narrow is not None:
            self.ms_ms_narrow = ms_ms_narrow
        if ccs_wide is not None:
            self.ccs_wide = ccs_wide
        if ccs_narrow is not None:
            self.ccs_narrow = ccs_narrow
        if msigma_narrow is not None:
            self.msigma_narrow = msigma_narrow
        if msigma_wide is not None:
            self.msigma_wide = msigma_wide

    @property
    def mz_wide(self):
        """Gets the mz_wide of this ScoringConfiguration.  # noqa: E501


        :return: The mz_wide of this ScoringConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._mz_wide

    @mz_wide.setter
    def mz_wide(self, mz_wide):
        """Sets the mz_wide of this ScoringConfiguration.


        :param mz_wide: The mz_wide of this ScoringConfiguration.  # noqa: E501
        :type: float
        """
        if mz_wide is None:
            raise ValueError("Invalid value for `mz_wide`, must not be `None`")  # noqa: E501

        self._mz_wide = mz_wide

    @property
    def mz_narrow(self):
        """Gets the mz_narrow of this ScoringConfiguration.  # noqa: E501


        :return: The mz_narrow of this ScoringConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._mz_narrow

    @mz_narrow.setter
    def mz_narrow(self, mz_narrow):
        """Sets the mz_narrow of this ScoringConfiguration.


        :param mz_narrow: The mz_narrow of this ScoringConfiguration.  # noqa: E501
        :type: float
        """
        if mz_narrow is None:
            raise ValueError("Invalid value for `mz_narrow`, must not be `None`")  # noqa: E501

        self._mz_narrow = mz_narrow

    @property
    def mz_unit(self):
        """Gets the mz_unit of this ScoringConfiguration.  # noqa: E501


        :return: The mz_unit of this ScoringConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._mz_unit

    @mz_unit.setter
    def mz_unit(self, mz_unit):
        """Sets the mz_unit of this ScoringConfiguration.


        :param mz_unit: The mz_unit of this ScoringConfiguration.  # noqa: E501
        :type: str
        """
        if mz_unit is None:
            raise ValueError("Invalid value for `mz_unit`, must not be `None`")  # noqa: E501
        allowed_values = ["DA", "MDA", "PPM"]  # noqa: E501
        if mz_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `mz_unit` ({0}), must be one of {1}"  # noqa: E501
                .format(mz_unit, allowed_values)
            )

        self._mz_unit = mz_unit

    @property
    def rt_in_seconds_narrow(self):
        """Gets the rt_in_seconds_narrow of this ScoringConfiguration.  # noqa: E501


        :return: The rt_in_seconds_narrow of this ScoringConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._rt_in_seconds_narrow

    @rt_in_seconds_narrow.setter
    def rt_in_seconds_narrow(self, rt_in_seconds_narrow):
        """Sets the rt_in_seconds_narrow of this ScoringConfiguration.


        :param rt_in_seconds_narrow: The rt_in_seconds_narrow of this ScoringConfiguration.  # noqa: E501
        :type: float
        """

        self._rt_in_seconds_narrow = rt_in_seconds_narrow

    @property
    def rt_in_seconds_wide(self):
        """Gets the rt_in_seconds_wide of this ScoringConfiguration.  # noqa: E501


        :return: The rt_in_seconds_wide of this ScoringConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._rt_in_seconds_wide

    @rt_in_seconds_wide.setter
    def rt_in_seconds_wide(self, rt_in_seconds_wide):
        """Sets the rt_in_seconds_wide of this ScoringConfiguration.


        :param rt_in_seconds_wide: The rt_in_seconds_wide of this ScoringConfiguration.  # noqa: E501
        :type: float
        """

        self._rt_in_seconds_wide = rt_in_seconds_wide

    @property
    def ms_ms_wide(self):
        """Gets the ms_ms_wide of this ScoringConfiguration.  # noqa: E501


        :return: The ms_ms_wide of this ScoringConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._ms_ms_wide

    @ms_ms_wide.setter
    def ms_ms_wide(self, ms_ms_wide):
        """Sets the ms_ms_wide of this ScoringConfiguration.


        :param ms_ms_wide: The ms_ms_wide of this ScoringConfiguration.  # noqa: E501
        :type: float
        """

        self._ms_ms_wide = ms_ms_wide

    @property
    def ms_ms_narrow(self):
        """Gets the ms_ms_narrow of this ScoringConfiguration.  # noqa: E501


        :return: The ms_ms_narrow of this ScoringConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._ms_ms_narrow

    @ms_ms_narrow.setter
    def ms_ms_narrow(self, ms_ms_narrow):
        """Sets the ms_ms_narrow of this ScoringConfiguration.


        :param ms_ms_narrow: The ms_ms_narrow of this ScoringConfiguration.  # noqa: E501
        :type: float
        """

        self._ms_ms_narrow = ms_ms_narrow

    @property
    def ccs_wide(self):
        """Gets the ccs_wide of this ScoringConfiguration.  # noqa: E501


        :return: The ccs_wide of this ScoringConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._ccs_wide

    @ccs_wide.setter
    def ccs_wide(self, ccs_wide):
        """Sets the ccs_wide of this ScoringConfiguration.


        :param ccs_wide: The ccs_wide of this ScoringConfiguration.  # noqa: E501
        :type: float
        """

        self._ccs_wide = ccs_wide

    @property
    def ccs_narrow(self):
        """Gets the ccs_narrow of this ScoringConfiguration.  # noqa: E501


        :return: The ccs_narrow of this ScoringConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._ccs_narrow

    @ccs_narrow.setter
    def ccs_narrow(self, ccs_narrow):
        """Sets the ccs_narrow of this ScoringConfiguration.


        :param ccs_narrow: The ccs_narrow of this ScoringConfiguration.  # noqa: E501
        :type: float
        """

        self._ccs_narrow = ccs_narrow

    @property
    def msigma_narrow(self):
        """Gets the msigma_narrow of this ScoringConfiguration.  # noqa: E501


        :return: The msigma_narrow of this ScoringConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._msigma_narrow

    @msigma_narrow.setter
    def msigma_narrow(self, msigma_narrow):
        """Sets the msigma_narrow of this ScoringConfiguration.


        :param msigma_narrow: The msigma_narrow of this ScoringConfiguration.  # noqa: E501
        :type: float
        """

        self._msigma_narrow = msigma_narrow

    @property
    def msigma_wide(self):
        """Gets the msigma_wide of this ScoringConfiguration.  # noqa: E501


        :return: The msigma_wide of this ScoringConfiguration.  # noqa: E501
        :rtype: float
        """
        return self._msigma_wide

    @msigma_wide.setter
    def msigma_wide(self, msigma_wide):
        """Sets the msigma_wide of this ScoringConfiguration.


        :param msigma_wide: The msigma_wide of this ScoringConfiguration.  # noqa: E501
        :type: float
        """

        self._msigma_wide = msigma_wide

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScoringConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScoringConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
