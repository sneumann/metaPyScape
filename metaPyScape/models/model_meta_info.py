# coding: utf-8

"""
    MetaboScape REST Application

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2025b
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModelMetaInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'version_number': 'str',
        'available_ion_notations': 'list[str]',
        'available_structure_types': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'version_number': 'versionNumber',
        'available_ion_notations': 'availableIonNotations',
        'available_structure_types': 'availableStructureTypes'
    }

    def __init__(self, id=None, name=None, version_number=None, available_ion_notations=None, available_structure_types=None):  # noqa: E501
        """ModelMetaInfo - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._version_number = None
        self._available_ion_notations = None
        self._available_structure_types = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if version_number is not None:
            self.version_number = version_number
        if available_ion_notations is not None:
            self.available_ion_notations = available_ion_notations
        if available_structure_types is not None:
            self.available_structure_types = available_structure_types

    @property
    def id(self):
        """Gets the id of this ModelMetaInfo.  # noqa: E501


        :return: The id of this ModelMetaInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelMetaInfo.


        :param id: The id of this ModelMetaInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ModelMetaInfo.  # noqa: E501


        :return: The name of this ModelMetaInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelMetaInfo.


        :param name: The name of this ModelMetaInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def version_number(self):
        """Gets the version_number of this ModelMetaInfo.  # noqa: E501


        :return: The version_number of this ModelMetaInfo.  # noqa: E501
        :rtype: str
        """
        return self._version_number

    @version_number.setter
    def version_number(self, version_number):
        """Sets the version_number of this ModelMetaInfo.


        :param version_number: The version_number of this ModelMetaInfo.  # noqa: E501
        :type: str
        """

        self._version_number = version_number

    @property
    def available_ion_notations(self):
        """Gets the available_ion_notations of this ModelMetaInfo.  # noqa: E501


        :return: The available_ion_notations of this ModelMetaInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._available_ion_notations

    @available_ion_notations.setter
    def available_ion_notations(self, available_ion_notations):
        """Sets the available_ion_notations of this ModelMetaInfo.


        :param available_ion_notations: The available_ion_notations of this ModelMetaInfo.  # noqa: E501
        :type: list[str]
        """

        self._available_ion_notations = available_ion_notations

    @property
    def available_structure_types(self):
        """Gets the available_structure_types of this ModelMetaInfo.  # noqa: E501


        :return: The available_structure_types of this ModelMetaInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._available_structure_types

    @available_structure_types.setter
    def available_structure_types(self, available_structure_types):
        """Sets the available_structure_types of this ModelMetaInfo.


        :param available_structure_types: The available_structure_types of this ModelMetaInfo.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["SMILES", "INCHI", "MOL"]  # noqa: E501
        if not set(available_structure_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `available_structure_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(available_structure_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._available_structure_types = available_structure_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelMetaInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelMetaInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
