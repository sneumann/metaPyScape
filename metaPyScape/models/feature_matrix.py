# coding: utf-8

"""
    MetaboScape REST Application

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2025b
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FeatureMatrix(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'intensities': 'list[list[float]]',
        'feature_ids': 'list[str]',
        'analysis_ids': 'list[str]'
    }

    attribute_map = {
        'intensities': 'intensities',
        'feature_ids': 'featureIds',
        'analysis_ids': 'analysisIds'
    }

    def __init__(self, intensities=None, feature_ids=None, analysis_ids=None):  # noqa: E501
        """FeatureMatrix - a model defined in Swagger"""  # noqa: E501
        self._intensities = None
        self._feature_ids = None
        self._analysis_ids = None
        self.discriminator = None
        if intensities is not None:
            self.intensities = intensities
        if feature_ids is not None:
            self.feature_ids = feature_ids
        if analysis_ids is not None:
            self.analysis_ids = analysis_ids

    @property
    def intensities(self):
        """Gets the intensities of this FeatureMatrix.  # noqa: E501


        :return: The intensities of this FeatureMatrix.  # noqa: E501
        :rtype: list[list[float]]
        """
        return self._intensities

    @intensities.setter
    def intensities(self, intensities):
        """Sets the intensities of this FeatureMatrix.


        :param intensities: The intensities of this FeatureMatrix.  # noqa: E501
        :type: list[list[float]]
        """

        self._intensities = intensities

    @property
    def feature_ids(self):
        """Gets the feature_ids of this FeatureMatrix.  # noqa: E501


        :return: The feature_ids of this FeatureMatrix.  # noqa: E501
        :rtype: list[str]
        """
        return self._feature_ids

    @feature_ids.setter
    def feature_ids(self, feature_ids):
        """Sets the feature_ids of this FeatureMatrix.


        :param feature_ids: The feature_ids of this FeatureMatrix.  # noqa: E501
        :type: list[str]
        """

        self._feature_ids = feature_ids

    @property
    def analysis_ids(self):
        """Gets the analysis_ids of this FeatureMatrix.  # noqa: E501


        :return: The analysis_ids of this FeatureMatrix.  # noqa: E501
        :rtype: list[str]
        """
        return self._analysis_ids

    @analysis_ids.setter
    def analysis_ids(self, analysis_ids):
        """Sets the analysis_ids of this FeatureMatrix.


        :param analysis_ids: The analysis_ids of this FeatureMatrix.  # noqa: E501
        :type: list[str]
        """

        self._analysis_ids = analysis_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FeatureMatrix, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeatureMatrix):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
