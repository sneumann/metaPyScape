# coding: utf-8

"""
    MetaboScape REST Application

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2025b
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from metaPyScape.models.structure import Structure
from typing import Optional, Set
from typing_extensions import Self

class AnnotationCandidate(BaseModel):
    """
    AnnotationCandidate
    """ # noqa: E501
    name: StrictStr
    annotation_configuration_id: StrictStr = Field(alias="annotationConfigurationId")
    molecular_formula: StrictStr = Field(alias="molecularFormula")
    structure: Optional[Structure] = None
    rt_dev_in_seconds: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="rtDevInSeconds")
    ms_ms_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="msMsScore")
    ccs_dev_in_perc: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ccsDevInPerc")
    __properties: ClassVar[List[str]] = ["name", "annotationConfigurationId", "molecularFormula", "structure", "rtDevInSeconds", "msMsScore", "ccsDevInPerc"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AnnotationCandidate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of structure
        if self.structure:
            _dict['structure'] = self.structure.to_dict()
        # set to None if structure (nullable) is None
        # and model_fields_set contains the field
        if self.structure is None and "structure" in self.model_fields_set:
            _dict['structure'] = None

        # set to None if rt_dev_in_seconds (nullable) is None
        # and model_fields_set contains the field
        if self.rt_dev_in_seconds is None and "rt_dev_in_seconds" in self.model_fields_set:
            _dict['rtDevInSeconds'] = None

        # set to None if ms_ms_score (nullable) is None
        # and model_fields_set contains the field
        if self.ms_ms_score is None and "ms_ms_score" in self.model_fields_set:
            _dict['msMsScore'] = None

        # set to None if ccs_dev_in_perc (nullable) is None
        # and model_fields_set contains the field
        if self.ccs_dev_in_perc is None and "ccs_dev_in_perc" in self.model_fields_set:
            _dict['ccsDevInPerc'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AnnotationCandidate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "annotationConfigurationId": obj.get("annotationConfigurationId"),
            "molecularFormula": obj.get("molecularFormula"),
            "structure": Structure.from_dict(obj["structure"]) if obj.get("structure") is not None else None,
            "rtDevInSeconds": obj.get("rtDevInSeconds"),
            "msMsScore": obj.get("msMsScore"),
            "ccsDevInPerc": obj.get("ccsDevInPerc")
        })
        return _obj


