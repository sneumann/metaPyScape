# coding: utf-8

"""
    MetaboScape REST Application

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2025b
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnnotationCandidate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'annotation_configuration_id': 'str',
        'molecular_formula': 'str',
        'structure': 'Structure',
        'rt_dev_in_seconds': 'float',
        'ms_ms_score': 'float',
        'ccs_dev_in_perc': 'float'
    }

    attribute_map = {
        'name': 'name',
        'annotation_configuration_id': 'annotationConfigurationId',
        'molecular_formula': 'molecularFormula',
        'structure': 'structure',
        'rt_dev_in_seconds': 'rtDevInSeconds',
        'ms_ms_score': 'msMsScore',
        'ccs_dev_in_perc': 'ccsDevInPerc'
    }

    def __init__(self, name=None, annotation_configuration_id=None, molecular_formula=None, structure=None, rt_dev_in_seconds=None, ms_ms_score=None, ccs_dev_in_perc=None):  # noqa: E501
        """AnnotationCandidate - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._annotation_configuration_id = None
        self._molecular_formula = None
        self._structure = None
        self._rt_dev_in_seconds = None
        self._ms_ms_score = None
        self._ccs_dev_in_perc = None
        self.discriminator = None
        self.name = name
        self.annotation_configuration_id = annotation_configuration_id
        self.molecular_formula = molecular_formula
        if structure is not None:
            self.structure = structure
        if rt_dev_in_seconds is not None:
            self.rt_dev_in_seconds = rt_dev_in_seconds
        if ms_ms_score is not None:
            self.ms_ms_score = ms_ms_score
        if ccs_dev_in_perc is not None:
            self.ccs_dev_in_perc = ccs_dev_in_perc

    @property
    def name(self):
        """Gets the name of this AnnotationCandidate.  # noqa: E501


        :return: The name of this AnnotationCandidate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AnnotationCandidate.


        :param name: The name of this AnnotationCandidate.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def annotation_configuration_id(self):
        """Gets the annotation_configuration_id of this AnnotationCandidate.  # noqa: E501


        :return: The annotation_configuration_id of this AnnotationCandidate.  # noqa: E501
        :rtype: str
        """
        return self._annotation_configuration_id

    @annotation_configuration_id.setter
    def annotation_configuration_id(self, annotation_configuration_id):
        """Sets the annotation_configuration_id of this AnnotationCandidate.


        :param annotation_configuration_id: The annotation_configuration_id of this AnnotationCandidate.  # noqa: E501
        :type: str
        """
        if annotation_configuration_id is None:
            raise ValueError("Invalid value for `annotation_configuration_id`, must not be `None`")  # noqa: E501

        self._annotation_configuration_id = annotation_configuration_id

    @property
    def molecular_formula(self):
        """Gets the molecular_formula of this AnnotationCandidate.  # noqa: E501


        :return: The molecular_formula of this AnnotationCandidate.  # noqa: E501
        :rtype: str
        """
        return self._molecular_formula

    @molecular_formula.setter
    def molecular_formula(self, molecular_formula):
        """Sets the molecular_formula of this AnnotationCandidate.


        :param molecular_formula: The molecular_formula of this AnnotationCandidate.  # noqa: E501
        :type: str
        """
        if molecular_formula is None:
            raise ValueError("Invalid value for `molecular_formula`, must not be `None`")  # noqa: E501

        self._molecular_formula = molecular_formula

    @property
    def structure(self):
        """Gets the structure of this AnnotationCandidate.  # noqa: E501


        :return: The structure of this AnnotationCandidate.  # noqa: E501
        :rtype: Structure
        """
        return self._structure

    @structure.setter
    def structure(self, structure):
        """Sets the structure of this AnnotationCandidate.


        :param structure: The structure of this AnnotationCandidate.  # noqa: E501
        :type: Structure
        """

        self._structure = structure

    @property
    def rt_dev_in_seconds(self):
        """Gets the rt_dev_in_seconds of this AnnotationCandidate.  # noqa: E501


        :return: The rt_dev_in_seconds of this AnnotationCandidate.  # noqa: E501
        :rtype: float
        """
        return self._rt_dev_in_seconds

    @rt_dev_in_seconds.setter
    def rt_dev_in_seconds(self, rt_dev_in_seconds):
        """Sets the rt_dev_in_seconds of this AnnotationCandidate.


        :param rt_dev_in_seconds: The rt_dev_in_seconds of this AnnotationCandidate.  # noqa: E501
        :type: float
        """

        self._rt_dev_in_seconds = rt_dev_in_seconds

    @property
    def ms_ms_score(self):
        """Gets the ms_ms_score of this AnnotationCandidate.  # noqa: E501


        :return: The ms_ms_score of this AnnotationCandidate.  # noqa: E501
        :rtype: float
        """
        return self._ms_ms_score

    @ms_ms_score.setter
    def ms_ms_score(self, ms_ms_score):
        """Sets the ms_ms_score of this AnnotationCandidate.


        :param ms_ms_score: The ms_ms_score of this AnnotationCandidate.  # noqa: E501
        :type: float
        """

        self._ms_ms_score = ms_ms_score

    @property
    def ccs_dev_in_perc(self):
        """Gets the ccs_dev_in_perc of this AnnotationCandidate.  # noqa: E501


        :return: The ccs_dev_in_perc of this AnnotationCandidate.  # noqa: E501
        :rtype: float
        """
        return self._ccs_dev_in_perc

    @ccs_dev_in_perc.setter
    def ccs_dev_in_perc(self, ccs_dev_in_perc):
        """Sets the ccs_dev_in_perc of this AnnotationCandidate.


        :param ccs_dev_in_perc: The ccs_dev_in_perc of this AnnotationCandidate.  # noqa: E501
        :type: float
        """

        self._ccs_dev_in_perc = ccs_dev_in_perc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnnotationCandidate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnnotationCandidate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
